## Makefile for building wireshark.exe with Microsoft C and nmake
## Use: $(MAKE) /$(MAKEFLAGS) -f makefile.nmake
#
# $Id$

include ..\..\config.nmake
include ..\..\Makefile.nmake.inc

############### no need to modify below this line #########

# We use GENERATED_CFLAGS to get around flex's non-LLP64-compliant output
GENERATED_CFLAGS=\
	$(STANDARD_CFLAGS) \
	/Zm800 \
	/I../.. /I../../wiretap $(GLIB_CFLAGS) $(GNUTLS_CFLAGS) \
	/I$(PCAP_DIR)\WPCAP\LIBPCAP /I$(PCAP_DIR)\WPCAP\LIBPCAP\bpf \
	/I$(PCAP_DIR)\WPCAP\LIBPCAP\lbl \
	/I$(PCAP_DIR)\include $(AIRPCAP_CFLAGS) \
	$(PORTAUDIO_CFLAGS) $(GEOIP_CFLAGS) \
	$(HHC_CFLAGS)

CFLAGS=$(WARNINGS_ARE_ERRORS) $(GENERATED_CFLAGS)

.c.obj::
	$(CC) $(CFLAGS) $(WSUG_CFLAGS) -Fd.\ -c $<

include Makefile.common


# if you add files here, be sure to include them also in Makefile.am EXTRA_DIST
TSHARK_TAP_OBJECTS = $(TSHARK_TAP_SRC:.c=.obj)


libcliui.lib	: ..\..\config.h $(TSHARK_TAP_OBJECTS) tshark-tap-register.obj
	link /lib /out:libcliui.lib $(TSHARK_TAP_OBJECTS) tshark-tap-register.obj

#
# Build "tshark-tap-register.c", which contains a function
# "register_all_tap_listeners()"
# that calls the register routines for all TShark tap listeners.
#
# We do this by grepping through sources.
#
# The shell script runs slowly, as multiple greps and seds are run
# for each input file; this is especially slow on Windows.  Therefore,
# if Python is present (as indicated by PYTHON being defined), we run
# a faster Python script to do that work instead.
#
# Formatting conventions:  The name of the tap_listener_register_*
# routines must start in column zero, or must be preceded only by
# "void " starting in column zero, and must not be inside #if.
#
!IFDEF PYTHON
tshark-tap-register.c: $(TSHARK_TAP_SRC) ..\..\tools\make-tap-reg.py
	@echo Making tshark-tap-register.c using python
	@$(PYTHON) ..\..\tools\make-tap-reg.py . tshark-taps $(TSHARK_TAP_SRC)
!ELSE
# The first argument is the name of the file to write.
# The second argument is the directory in which the source files live.
# All subsequent arguments are the files to scan.
tshark-tap-register.c: $(TSHARK_TAP_SRC) ..\..\tools\make-tapreg-dotc
	@echo Making tshark-tap-register.c
	@$(SH) ../../tools/make-tapreg-dotc tshark-tap-register.c . $(TSHARK_TAP_SRC)
!ENDIF

clean:
	rm -f $(TSHARK_TAP_OBJECTS) tshark-tap-register.obj libcliui.lib *.pdb \
		*.sbr doxygen.cfg html/*.* tshark-tap-register-cache.pkl \
		tshark-tap-register.c-tmp
	if exist html rmdir html

distclean: clean

maintainer-clean: distclean
	rm -f $(GENERATED_FILES)

checkapi: checkapi-base checkapi-todo

checkapi-base:
	$(PERL) ../../tools/checkAPIs.pl -g deprecated-gtk -build \
	$(TSHARK_TAP_SRC)

checkapi-todo:
	$(PERL) ../../tools/checkAPIs.pl -M -g deprecated-gtk-todo -build \
	$(TSHARK_TAP_SRC)
